/*
closure.eve

Demonstration of closures. The closure:: scope operator tells the interpreter 
to search the closure scope stack for the specified identifier. It will
return the first identifier it finds, so don't shadow! closure:: only works
in functions. Anywhere else will throw a closure scope not present error.
*/

def Animal = AnimalCtor(noise, fluff) {
	print("we have passed in " ~ noise);
	var fluffy = clone fluff;
	def anotherFunc = anotherFunc() {
		proto Animal2 {
			def makeNoise = makeNoise() {
				print(fluffy ~ " " ~ noise);
			}
		}
	}
	return anotherFunc;
}

var cat = Animal("meow", "durp");
cat = cat();
print(cat);
cat.makeNoise();

var dog = Animal("woof", "burp");
dog = dog();
dog.makeNoise();

//cat.makeNoise();
//You can even use closure:: to refer to the object holding the function.
proto obj {
	var aProp = 10;

	def demonstrate = () {
		var a = "5";
		def z = () {
			print(self.aProp);
		}

		z();
	}
}

//obj.demonstrate();
