/*
closure.eve

Demonstration of closures. The closure:: scope operator tells the interpreter 
to search the closure scope stack for the specified identifier. It will
return the first identifier it finds, so don't shadow! closure:: only works
in functions. Anywhere else will throw a closure scope not present error.
*/

def Animal = (noise) {
	def anotherFunc = () {
		proto Animal {
			def makeNoise = makeNoise() {
				print(noise);
			}
		}

		return Animal;
	}

	return anotherFunc();
}

var cat = Animal("meow");
cat.makeNoise();

var dog = Animal("woof");
dog.makeNoise();

//cat.makeNoise();
//You can even use closure:: to refer to the object holding the function.
proto obj {
	var aProp = 10;

	def demonstrate = () {
		var a = "5";
		def z = () {
			print(self.aProp);
		}

		z();
	}
}

//obj.demonstrate();
