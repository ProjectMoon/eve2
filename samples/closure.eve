/*
closure.eve

Demonstration of closures. The closure:: scope operator tells the interpreter 
to search the closure scope stack for the specified identifier. It will
return the first identifier it finds, so don't shadow! closure:: only works
in functions. Anywhere else will throw a closure scope not present error.
*/

def Animal = AnimalCtor(noise) {
	proto Animal2 {
		def makeNoise = makeNoise() {
			print(noise);
		}
	}
	
	return Animal2;
}

var cat = Animal("meow");
var dog = Animal("woof");
cat.makeNoise();
dog.makeNoise();

/*
While not strictly a closure, you can use the special "self" variable inside
inner functions. Note that the self variable will NOT be preserved in a
closure at this time. If the function z was returned, it would crash when
called because "self" does not exist at the closure scope.
*/
proto obj {
	var aProp = 10;

	def demonstrate = () {
		var a = "5";
		def z = () {
			print(self.aProp);
		}
		
		z();
	}
}

obj.demonstrate();
