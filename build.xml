<project xmlns:ivy="antlib:org.apache.ivy.ant" name="eve-interpreter" default="jar" basedir=".">
	<description>
***TO BUILD: ant jar***

This will build the eve interpreter. Building is divided into two stages:
dependency resolution and actual building. If you do not have dependencies
installed, downloading all of them can take a bit of time. The build process
uses Apache Ivy for dependency resolution.

Once dependencies are resolved, building is very quick. An executable eve.jar
will be placed in a dist directory, and all dependencies will be placed in a
lib directory there.
		
To run the test suite, run `ant test`. Eve uses JUnit for unit testing.
	</description>

	<!-- global properties -->
	<property name="src" location="src" />
	<property name="tests" location="tests" />
	<property name="lib" location="lib" />
	<property name="antlr-generated" location="antlr-generated" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="res" location="res" />
	<property name="bin" location="bin" /> <!-- generated by eclipse -->
	
	<!-- Build macro for antlr code generation -->
	<macrodef name="antlr3">
		<attribute name="grammar"/>
		<attribute name="output" default="."/>
		<attribute name="lib" default="."/>
		<sequential>
			<java classname="org.antlr.Tool" fork="true" failonerror="true">
				<classpath>
					<fileset dir="lib/" includes="*.jar" />
				</classpath>
				<arg value="-o"/>
				<arg path="@{output}"/>
				<arg value="-verbose"/>
				<arg value="-make"/>
				<arg path="@{grammar}"/>
			</java>
		</sequential>
	</macrodef>
		
	<!-- resolve all dependencies via Ivy -->
    <target name="dependencies" description="--> retrieve dependencies with ivy">
    	<ivy:configure />
        <ivy:retrieve />
    </target>
	
	<!-- initial build setup -->
	<target name="init" depends="dependencies" description="--> build setup">
		<tstamp />
		<mkdir dir="${build}" />
	</target>

	<target name="antlr" depends="init" description="--> antlr code generation">
		<mkdir dir="${antlr-generated}" />
		<property name="dest" location="${antlr-generated}/eve/core/"/>
		<property name="grammar" location="${src}/eve/core/Eve.g" />
		<property name="ast" location="${src}/eve/core/ASTParser.g" />

		<!-- Generate code from Eve.g and ASTParser.g -->
		<antlr3 grammar="${grammar}" output="${dest}" />
		<antlr3 grammar="${ast}" output="${dest}" />		
	</target>
	
	<!-- compile code -->
	<target name="compile" depends="antlr" description="--> build eve">
		<mkdir dir="${build}" />
		<javac srcdir="${src};${antlr-generated}" listfiles="true" destdir="${build}" deprecation="Yes" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
			<classpath>
				<fileset dir="lib/" includes="*.jar" />
			</classpath>
		</javac>
	</target>
	
	<target name="compile-tests" depends="compile" description="--> build test cases">
		<javac srcdir="${tests}" destdir="${build}" deprecation="Yes" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
			<classpath>
				<fileset dir="${build}" includes="**/*.class" />
				<fileset dir="lib/" includes="*.jar" />
			</classpath>
		</javac>
	</target>
	
	<target name="test" depends="compile-tests" description="--> run test suite">
		<junit fork="true">
			<classpath>
				<pathelement path="${build}" />
				<fileset dir="${lib}" includes="*.jar" />
			</classpath>
			<formatter type="brief" usefile="false" />
			<test name="eve.tests.Objects" />
			<test name="eve.tests.Namespaces" />
			<test name="eve.tests.AutoDeepCloning" />
			<test name="eve.tests.EqualsExpressions" />
		</junit>
	</target>
	
	<!-- build executable jar file -->
	<target name="jar" depends="compile" description="--> create executable jar">
		<!-- library definitions -->
		<property name="antlr" location="${lib}/antlr-runtime-3.3.jar" />
		<property name="commons-cli" location="${lib}/commons-cli-1.2.jar" />
		
		<!-- copy runtime dependencies to dist/lib -->
		<!--<copy file="${antlr}" todir="${dist}/lib" />
		<copy file="${commons-cli}" todir="${dist}/lib" />-->
			
		<copy todir="${dist}/lib">
			<fileset dir="${lib}">
				<include name="**/*.jar" />
				<exclude name="**/*-sources.jar" />
				<exclude name="**/*-javadoc.jar" />
				<exclude name="**/junit*.jar" />
				<!-- for antlr, we currently only need the 3.3 runtime -->
				<exclude name="**/antlr-3.3.jar" />
				<exclude name="**/antlr-2.*.jar" />
				<exclude name="**/stringtemplate-*.jar" />
			</fileset>
		</copy>

		<manifestclasspath property="manifest_cp" jarfile="${dist}/eve.jar">
			<classpath>
				<fileset dir="${dist}/lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</manifestclasspath>
				
		<jar destfile ="${dist}/eve.jar" basedir="${build}" includes="**/*.class">
			<manifest>
				<attribute name="Main-Class" value="eve.core.EveCore" />
				<attribute name="Class-Path" value="${manifest_cp}" />
			</manifest>
			<fileset dir="${res}">
				<include name="logback.xml" />
			</fileset>
		</jar>
		
		<chmod perm="+x" file="${dist}/eve.jar" />
	</target>
	
	<target name="clean" description="--> clean Up">
		<delete dir="${dist}" />
		<delete dir="${build}" />
		<delete dir="${antlr-generated}" />
		<delete dir="${bin}" />
	</target>
</project>
